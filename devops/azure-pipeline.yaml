trigger:
- master
- develop

pool:
  vmImage: ubuntu-20.04

variables:
  location: "West Europe"
  isDev: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]

  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  isPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]
  isPullRequestToDev: $[and(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/develop'))]
  isPullRequestToMaster: $[and(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/master'))]
  isManual: $[eq(variables['Build.Reason'], 'Manual')]

  ci_dev_condition: $[or(eq(variables.isPullRequestToDev, true), eq(variables.isDev, true), eq(variables.isManual, true))]
  cd_dev_condition: $[and(eq(variables.isPullRequest, false), eq(variables.isDev, true))]

  ci_test_condition: $[or(eq(variables.isMaster, true), eq(variables.isPullRequestToMaster, true))]
  cd_test_condition: $[and(eq(variables.isMaster, true), eq(variables.isPullRequest, false))]

  cd_prod_condition: $[and(eq(variables.isMaster, true), eq(variables.isPullRequest, false))]

resources:
  repositories:
    - repository: templates
      type: github
      name: "Narato/pipeline-templates"
      endpoint: github.com_KapelliSupport
      ref: 'refs/heads/master'

stages:
  - stage: CI_NETCORE_DEV
    condition: eq(variables.ci_dev_condition, true)
    displayName: CI_NETCORE_DEV
    jobs:
    - job: Build
      steps:
      - task: gittools.gittools.setup-gitversion-task.gitversion/setup@0
        displayName: gitversion/setup
        inputs:
          versionSpec: 5.x

      - task: gittools.gittools.execute-gitversion-task.gitversion/execute@0
        displayName: gitversion/execute

      - bash: |
            if [ $BUILD_SOURCEBRANCH == "refs/heads/master" ]
            then
              echo "Set build_semver variable for master"
              echo $GITVERSION_MAJORMINORPATCH
              echo "##vso[task.setvariable variable=BUILD_SEMVER]$GITVERSION_MAJORMINORPATCH"
            else
              echo "Set build_semver variable not for master"
              echo $GITVERSION_FULLSEMVER
              echo "##vso[task.setvariable variable=BUILD_SEMVER]$GITVERSION_FULLSEMVER"
            fi
        displayName: 'Set build_semver variable'

      - task: richardfennellBM.BM-VSTS-Versioning-Task.Version-DotNetCoreAssemblies-Task.VersionDotNetCoreAssemblies@2
        displayName: 'Version .NET Core Assemblies'
        inputs:
          VersionNumber: '$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch).0'

      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: restore
          projects: '**/*.csproj'
          vstsFeed: 'af8ad248-5b28-4fbc-967d-2f3f18e11128'

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: '**/*.csproj'
          arguments: '--configuration $(BuildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: '**/*.[Tt]ests.csproj'
          arguments: '--configuration $(BuildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: Publish
        inputs:
          command: publish
          publishWebProjects: false
          projects:  |
            **/*.csproj
            !**/*[Tt]ests/*.csproj
          arguments: '--no-build --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: false
      - task: DotNetCoreCLI@2
        displayName: Pack
        inputs:
          command: pack
          packagesToPack: '**/JUST.net.csproj'
          nobuild: false
          includesymbols: true
          includesource: true
          versioningScheme: byEnvVar
          versionEnvVar: GitVersion.SemVer

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Arcifact: Drop'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
        condition: succeededOrFailed()
  - stage: CD_NETCORE_DEV
    dependsOn: CI_NETCORE_DEV
    condition: and(in(dependencies.CI_NETCORE_DEV.result, 'Succeeded', 'SucceededWithIssues'), eq(variables.cd_dev_condition, true))
    displayName: CD_NETCORE_DEV
    jobs:
      - deployment: Deploy_Nuget
        environment: Dev
        strategy:
          runOnce:
              deploy:
                steps:
                - task: DotNetCoreCLI@2
                  displayName: 'dotnet push'
                  inputs:
                    command: push
                    packagesToPush: '$(Pipeline.Workspace)/drop/*.nupkg;!$(Pipeline.Workspace)/drop/*.symbols.nupkg'
                    publishVstsFeed: 'af8ad248-5b28-4fbc-967d-2f3f18e11128'